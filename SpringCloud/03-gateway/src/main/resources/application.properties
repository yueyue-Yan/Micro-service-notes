## application.yml是用户级别的配置文件

#无法写到远程仓库
#1.
spring.config.import=optional:configserver:http://localhost:10001

#2.
#健康检查开放所有端点
management.endpoints.web.exposure.include=*

#rabbitmq配置信息
spring.rabbitmq.host=192.168.64.128
spring.rabbitmq.port=5672
spring.rabbitmq.username=root
spring.rabbitmq.password=06011127
spring.rabbitmq.virtual-host=/



#注释掉：放在远程仓库里了（https://github.com/yueyue-Yan/Micro-service-notes/blob/config/application-dev.properties）

#1.
##修改内置tomcat上下文和端口号
#server.port=5002
#server.servlet.context-path=/

#2.
##配置连接redis
#spring.redis.host=192.168.64.128
#spring.redis.port=6379
#spring.redis.database=1
##spring.redis.password=xxxxx

#3.
##客户端--消费者/提供者
##设置 注册到注册中心的微服务名称
#spring.application.name=03-gateway
##注册中心的地址
##即使是单个节点，也会想集群中的各个注册中心节点进行注册
##如果6001故障，那么还可以使用6002进行连接
#eureka.client.service-url.defaultZone=http://localhost:6001/eureka,http://localhost:6002/eureka
##向 注册中心的微服务节点 中注册自己（客户端）默认值是true
#eureka.client.register-with-eureka=true
##使用IP地址注册服务
#eureka.instance.prefer-ip-address=true
##拉取 来自注册中心的 服务地址列表（客户端）默认值是true
#eureka.client.fetch-registry=true
##心跳机制交互的时间
#eureka.instance.lease-renewal-interval-in-seconds=30
##超时后从列表剔除的时间
#eureka.instance.lease-expiration-duration-in-seconds=90

#4.
#启动5002报错：Please set spring.main.web-application-type=reactive or remove spring-boot-starter-web dependency.
#解决：
spring.main.web-application-type=reactive

#5.
##gateway网关配置信息
##网关路由配置：包含断言、过滤器、请求转发
##拦截多个url、默认不去除拦截前缀、重复url规则:前面的会将后面覆盖
##(1. 路由的唯一标识
#spring.cloud.gateway.routes[0].id=toConsumer02
#
##(2. 请求转发的url地址
##spring.cloud.gateway.routes[2].uri=http://localhost:8002
#
## 负载均衡访问规则：（lb即load balanced负载均衡）
## ① lb://ip+端口负载： uri=lb://localhost：8002
## ② lb://微服务名称(通过http://localhost:6001查出微服务名称)  ：uri=lb://eureka-client-consumer
#spring.cloud.gateway.routes[0].uri=lb://EUREKA-CLIENT-CONSUMER
#
##(3. 过滤器工厂
## 添加请求头的过滤器
##spring.cloud.gateway.routes[2].filters[0]=AddRequestHeader=X-Request-Header, blueSky
## 添加请求参数过滤器
##spring.cloud.gateway.routes[2].filters[1]=AddRequestParameter=X-Request-Parameter, redFlower
##添加响应头的过滤器（只能在浏览器查看）
##spring.cloud.gateway.routes[2].filters[2]=AddResponseHeader=X-Response-Header, greenGlass
##添加前缀访问路径(不用，直接在Path里加，并与StripPrefix=1连用)
##spring.cloud.gateway.routes[2].filters[3]=PrefixPath=/api
#
##去除访问前缀的过滤器，1代表去除1级路径，2代表去除两级路径(使用)
##去除1级路径: 浏览器输入：http://localhost:5002/api/consumer/01-->实际请求：http://localhost:5002/consumer/01
##spring.cloud.gateway.routes[2].filters[3]=StripPrefix=1
#
####路径重写的过滤器
###例子：把/api/abc/重写为/consumer
###浏览器输入：http://localhost:5002/api/api/abc/01-->实际请求：http://localhost:5002/consumer/01
###解释：第一个/api被StripPrefix=1（去除访问前缀的过滤器）去除，第二个/api连着/abc一起被RewritePath（路径重写的过滤器）去除
##spring.cloud.gateway.routes[2].filters[4]=RewritePath=/api/abc/?(?<segment>.*), /consumer/$\{segment}
#
###设置响应码的过滤器
#spring.cloud.gateway.routes[0].filters[0]=SetStatus=401
#
### 通过网关和Redis结合，根据令牌桶算法，对请求进行限流操作
### 当请求过多，被限流时，返回的是429的响应码
#spring.cloud.gateway.routes[0].filters[1].name=RequestRateLimiter
#
###令牌桶容量
#spring.cloud.gateway.routes[0].filters[1].args.redis-rate-limiter.burstCapacity=2
###每秒钟令牌生成数
#spring.cloud.gateway.routes[0].filters[1].args.redis-rate-limiter.replenishRate=1
###每次请求获取的令牌数，默认1
### 当令牌生成时，获取的请求会被存储到Redis中，当请求执行完成，Redis会清理掉之前存入的数据
#spring.cloud.gateway.routes[0].filters[1].args.redis-rate-limiter.requestedTokens=1
### @xxx，必须是Spring容器中包含的对象(引导类里@Bean配置)，也就是我们KeyResolver在容器中的名称，只能有一个
#spring.cloud.gateway.routes[0].filters[1].args.key-resolver=#{@userKeyResolver}
#
#
#
#
##(4. 断言规则:Path,After,Before,Between,Cookie,Header，Method，Query等等
##全部断言为真才可以进行路由访问操作
#spring.cloud.gateway.routes[0].predicates[0]=Path=/consumer/**,/api/**,/user/**
##指定时间之后，允许访问的断言规则，在指定时间之前访问会报404。
## 同理：After=t, Before=t, Between=t1,t2
##http://localhost:5002/consumer/03 -->正确访问的json(我是yueyue....)
#spring.cloud.gateway.routes[0].predicates[1]=After=2023-05-11T18:15:50.999-07:00[Asia/Shanghai]
##指定cookie的断言规则:Cookie=key,value
#spring.cloud.gateway.routes[0].predicates[2]=Cookie=abc,bcd
##指定请求头的断言规则:Header=name,value
#spring.cloud.gateway.routes[0].predicates[3]=Header=X-Request-Id,yy
##指定请求方式的断言规则：Method=GET,POST,DELETE ...
#spring.cloud.gateway.routes[0].predicates[4]=Method=GET,POST
##指定请求参数的断言规则: Query=key,value(只能以地址栏的键值对方式进行校验，所以通过form表单或者通过json进行传递都是不行的)
#spring.cloud.gateway.routes[0].predicates[5]=Query=param,test





#解释说明文字
##gateway网关配置信息
##网关路由配置：包含断言、过滤器、请求转发
##List<RouteDefinition> routes
##RouteDefinition：
##    ①private String id;
##    断言规则
##    ②private List<PredicateDefinition> predicates = new ArrayList();
##       PredicateDefinition：
##             private String name;
##             private Map<String, String> args = new LinkedHashMap();
##    ③private List<FilterDefinition> filters = new ArrayList();
##       FilterDefinition:
##               private String name;
##               private Map<String, String> args = new LinkedHashMap();
##    ④private URI uri;
##    private Map<String, Object> metadata = new HashMap();
##    private int order = 0;
#
#
##路由的唯一标识
#spring.cloud.gateway.routes[0].id=toBaidu
##请求转发的url地址
#spring.cloud.gateway.routes[0].uri=https://www.baidu.com
##断言规则
#spring.cloud.gateway.routes[0].predicates[0]=Path=/
##http://localhost:5002-->百度首页https://www.baidu.com
#
#
##路由的唯一标识
#spring.cloud.gateway.routes[1].id=toBaiduNews
#
##请求转发的url地址
#spring.cloud.gateway.routes[1].uri=https://news.baidu.com
##断言规则
##拦截多个url、默认不去除拦截前缀、重复url规则:前面的会将后面覆盖
#spring.cloud.gateway.routes[1].predicates[0]=Path=/, /guonei, /guoji
##http://localhost:5002-->仍是百度首页https://www.baidu.com
##http://localhost:5002/guonei-->百度国内新闻界面https://news.baidu.com/guonei
##http://localhost:5002/guoji-->百度国际新闻界面https://news.baidu.com/guoji



























